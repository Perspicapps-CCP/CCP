name: Run CI/CD for users service

on:
  push:
    paths:
      - "users/**"
    branches: [ "main" ]
  workflow_dispatch:

env:
  PROJECT_ID: ccp-perspicapps
  REGION: us-central1
  CLUSTER_NAME: ccp-autopilot

permissions:
  contents: read

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: main
    - name: Set up Python 3.13
      uses: actions/setup-python@v3
      with:
        python-version: "3.13.1"
    - name: Install pipenv
      working-directory: ./users
      run: pip install pipenv
    - name: Install dependencies      
      working-directory: ./users
      run: pipenv install --dev --system --deploy
    - name: Run unit tests
      working-directory: ./users
      run: pipenv run pytest --cov=. -v -s --cov-fail-under=70

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.generate_tag.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          
      - name: Generate version tag
        id: generate_tag
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y%m%d')
          COMMITS_TODAY=$(git rev-list --count --after="midnight" HEAD)
          VERSION_TAG="v${DATE}.${COMMITS_TODAY}.${SHORT_SHA}"
          echo "version_tag=${VERSION_TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${VERSION_TAG}"

      - name: Auth gcp project
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: Set up cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Use gcloud CLI
        run: gcloud info

      - name: Artifact registry auth
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Build image
        working-directory: ./users
        run: |
          docker build . --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ccp-images/users:${{ steps.generate_tag.outputs.version_tag }}
          docker build . --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ccp-images/users:latest

      - name: Push image to artifact registry
        run: |
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ccp-images/users:${{ steps.generate_tag.outputs.version_tag }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ccp-images/users:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: Auth gcp project
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: Set up cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Get GKE credentials
        run: |
          gcloud components install gke-gcloud-auth-plugin
          gke-gcloud-auth-plugin --version
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --region ${{ env.REGION }}

      - name: 'Set up Kustomize'
        run: |-
          # Download and extract kustomize properly
          curl -s -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz | tar xz
          chmod +x ./kustomize
          sudo mv ./kustomize /usr/local/bin/
          kustomize version
      
      - name: 'Deploy to GKE'
        working-directory: ./deployment/users
        run: |-
          kustomize edit set image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ccp-images/users:latest=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/ccp-images/users:${{ needs.build.outputs.version_tag }}
          kustomize build . | kubectl apply -f -
          kubectl apply -f k8s-configmap-secrets.yml
          kubectl apply -f k8s-service.yml
          kubectl apply -f k8s-ingress.yml
          kubectl rollout status deployment/users-api
          kubectl rollout status deployment/users-broker-consumer
          kubectl get services -o wide
